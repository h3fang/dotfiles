#!/usr/bin/python3

import os
import requests
import fcntl
import time


OWM = "OWM_AID"
QWEATHER = "QWEATHER_KEY"
ERROR = "<span color='red'>{}</span>"


def get_air_quality(location: str, key: str):
    r = requests.get(
        f"https://devapi.qweather.com/v7/air/now?location={location}&key={key}",
        timeout=5,
    )
    r.raise_for_status()
    r = r.json()
    index = r["now"]
    return f"AQI: {index['aqi']}({index['category']})"


def qweather(location):
    key = os.getenv(QWEATHER)
    if key is None:
        raise RuntimeError(f"{QWEATHER} not specified")

    r = requests.get(
        f"https://geoapi.qweather.com/v2/city/lookup?location={location}&key={key}",
        timeout=5,
    )
    r.raise_for_status()
    r = r.json()
    loc = r["location"][0]
    location_name = loc["name"]
    location_id = loc["id"]

    r = requests.get(
        f"https://devapi.qweather.com/v7/weather/now?key={key}&location={location_id}",
        timeout=5,
    )
    r.raise_for_status()
    d = r.json()

    n = d["now"]
    summary = f"{location_name} {n['text']} {n['temp']}℃"
    details = [
        f"Feels Like: {n['feelsLike']}℃",
        f"Pressure: {n['pressure']} hPa",
        f"Humidity: {n['humidity']}%",
        f"Visibility: {n['vis']} km",
        f"Wind Speed: {n['windSpeed']} km/h",
        f"Wind Direction: {n['wind360']} degree",
        f"Observation Time: {n['obsTime']}",
    ]
    if "cloud" in n:
        details.append(f"Cloudiness: {n['cloud']}%")
    details.append(get_air_quality(location_id, key))
    return summary, details


def openweathermap(location):
    a = os.getenv(OWM)
    if a is None:
        raise RuntimeError(f"{OWM} not specified")

    url = "https://api.openweathermap.org/data/2.5/weather"
    r = requests.get(
        f"{url}?q={location}&units=metric&lang=zh_cn&appid={a}",
        timeout=5,
    )
    r.raise_for_status()
    d = r.json()
    summary = f"{d['name']} {d['weather'][0]['description']} {d['main']['temp']:.0f}℃"
    details = [
        f"Feels Like: {d['main']['feels_like']:.0f}℃",
        f"Pressure: {d['main']['pressure']} hPa",
        f"Humidity: {d['main']['humidity']}%",
        f"Visibility: {d['visibility']} m",
        f"Cloudiness: {d['clouds']['all']}%",
        f"Wind Speed: {d['wind']['speed']} m/s",
        f"Wind Direction: {d['wind']['deg']} degree",
    ]
    if "gust" in d["wind"]:
        details.append(f"Wind Gust: {d['wind']['gust']} m/s")
    return summary, details


def update():
    location = os.getenv("LOCATION_CITY")
    if location is None:
        print(ERROR.format("Location"))
        return

    summary = ""
    details = ["qweather"]
    try:
        summary, d = qweather(location)
        details += d
    except RuntimeError as e:
        details.append(str(e))
    except Exception as e:
        details.append(type(e).__name__)

    if len(summary) == 0:
        details.append("openweathermap")
        try:
            summary, d = openweathermap(location)
            details += d
        except RuntimeError as e:
            details.append(str(e))
        except Exception as e:
            details.append(type(e).__name__)
    if len(summary) == 0:
        summary = ERROR.format("Error")
    details = "\r".join(details)
    return f"{summary}\n{details}"


if __name__ == "__main__":
    # temporary workaround for https://github.com/Alexays/Waybar/issues/368
    with open("/tmp/waybar_weather.lock", "w+", newline="\n", encoding="utf-8") as f:
        fcntl.flock(f, fcntl.LOCK_EX)

        t = f.readline().rstrip()
        now = int(time.time())

        if len(t) == 0 or now - int(t) > 120:
            lines = update()
            f.write(f"{now}\n{lines}")
        else:
            lines = f.read()

        print(lines)

        fcntl.flock(f, fcntl.LOCK_UN)
