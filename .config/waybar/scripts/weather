#!/usr/bin/python3

import fcntl
import json
import os
import time
import traceback
from base64 import urlsafe_b64encode
from pathlib import Path
from subprocess import check_output

import requests

HOST = ""


def json_web_token() -> str:
    kid = os.environ["QWEATHER_KID"]
    sub = os.environ["QWEATHER_SUB"]
    headers = urlsafe_b64encode(json.dumps({"alg": "EdDSA", "kid": kid}).encode())

    t = int(time.time())
    payload = {
        "iat": t - 30,
        "exp": t + 600,
        "sub": sub,
    }
    payload = urlsafe_b64encode(json.dumps(payload).encode())

    header_payload = headers + b"." + payload
    temp = Path(f"/tmp/qweather-jwt-{t}")
    with temp.open(mode="wb") as f:
        f.write(header_payload)

    private_key = Path().home() / ".ssh/qweather.pem"
    sig = check_output(
        f"openssl pkeyutl -sign -inkey {private_key} -rawin -in {temp}",
        shell=True,
    )
    sig = urlsafe_b64encode(sig)
    temp.unlink()
    return (header_payload + b"." + sig).decode()


def get_air_quality(location: str, s: requests.Session) -> str:
    r = s.get(
        f"{HOST}/v7/air/now?location={location}",
        timeout=5,
    )
    r.raise_for_status()
    r = r.json()
    index = r["now"]
    return f"AQI: {index['aqi']}({index['category']})"


def get_location_id(location: str, s: requests.Session) -> str:
    ids = {}
    file = Path("/tmp/qweather-loc")
    if file.exists():
        with file.open() as f:
            ids = json.load(f)
            if location in ids:
                return ids[location]

    r = s.get(
        f"{HOST}/geo/v2/city/lookup?location={location}",
        timeout=5,
    )
    r.raise_for_status()
    r = r.json()
    if "code" in r and int(r["code"]) != 200:
        raise RuntimeError(f"Geoapi returned code: {r['code']}")
    loc_id = r["location"][0]["id"]
    ids[location] = loc_id

    with file.open(mode="w") as f:
        json.dump(ids, f)

    return loc_id


def qweather() -> tuple[str, str]:
    global HOST
    HOST = os.environ["QWEATHER_HOST"]
    location = os.environ["QWEATHER_LOC"]

    s = requests.Session()
    s.headers.update({"Authorization": f"Bearer {json_web_token()}"})

    location_id = get_location_id(location, s)

    r = s.get(
        f"{HOST}/v7/weather/now?location={location_id}",
        timeout=5,
    )
    r.raise_for_status()
    d = r.json()

    n = d["now"]
    summary = f"{location} {n['text']} {n['temp']}℃"
    details = (
        f"Feels Like: {n['feelsLike']}℃\n"
        + f"Pressure: {n['pressure']} hPa\n"
        + f"Humidity: {n['humidity']}%\n"
        + f"Visibility: {n['vis']} km\n"
        + f"Wind Speed: {n['windSpeed']} km/h\n"
        + f"Wind Direction: {n['wind360']} degree\n"
        + f"Observation Time: {n['obsTime']}\n"
    )

    if "cloud" in n:
        details += f"Cloudiness: {n['cloud']}%\n"
    details += get_air_quality(location_id, s)
    return summary, details


def update() -> str:
    summary = ""
    details = ""

    try:
        summary, details = qweather()
    except Exception:
        summary = "<span color='red'>Error</span>"
        details = traceback.format_exc(limit=3)

    return json.dumps({"text": summary, "tooltip": details})


if __name__ == "__main__":
    # temporary workaround for https://github.com/Alexays/Waybar/issues/368
    with open("/tmp/waybar-weather.lock", "w+", newline="\n", encoding="utf-8") as f:
        fcntl.flock(f, fcntl.LOCK_EX)

        t = f.readline().rstrip()
        now = int(time.time())

        if len(t) == 0 or now - int(t) > 120:
            output = update()
            f.write(f"{now}\n{output}")
        else:
            output = f.read()

        print(output)

        fcntl.flock(f, fcntl.LOCK_UN)
