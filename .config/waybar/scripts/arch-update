#!/usr/bin/env python3

# requires: pacman-contrib, yay

# modified from https://github.com/vivien/i3blocks-contrib/tree/master/arch-update
# output format:  {official repo packages count}+{AUR packages count}


import fcntl
import json
import time
import traceback
from subprocess import CalledProcessError, check_output

BASE_COLOR = "white"
UPDATE_COLOR = "lime"
ERROR_COLOR = "red"


def check_updates(cmd: str, no_update_ret: int, limit=5) -> tuple[int, str, str]:
    try:
        output = check_output(cmd, shell=True, timeout=15).decode()
        updates = [line for line in output.split("\n") if line]
        count = len(updates)
        updates = "\n".join(updates[:limit])
        if count > limit:
            updates += "\n..."
        color = UPDATE_COLOR if count > 0 else BASE_COLOR
        return count, updates, color
    except CalledProcessError as e:
        if e.returncode == no_update_ret:
            return 0, "", BASE_COLOR
        else:
            content = "\n".join(traceback.format_tb(e.__traceback__))
            return 0, content, ERROR_COLOR
    except Exception as e:
        content = "\n".join(traceback.format_tb(e.__traceback__))
        return 0, content, ERROR_COLOR


def update() -> str:
    repo_count, repo_updates, repo_color = check_updates("checkupdates", 2)
    aur_count, aur_updates, aur_color = check_updates("yay -Qua", 1)

    summary = f" <span color='{repo_color}'>{repo_count}</span>+<span color='{aur_color}'>{aur_count}</span>"

    if len(repo_updates) == 0 and len(aur_updates) == 0:
        details = "Up to date"
    else:
        details = f"{repo_updates}\n{aur_updates}".strip("\n")

    return json.dumps({"text": summary, "tooltip": details})


if __name__ == "__main__":
    # multiple instances will contend for the db.lock and fail
    # temporary workaround for https://github.com/Alexays/Waybar/issues/368
    with open(
        "/tmp/waybar-arch-update.lock", "w+", newline="\n", encoding="utf-8"
    ) as f:
        fcntl.flock(f, fcntl.LOCK_EX)

        t = f.readline().rstrip()
        now = int(time.time())

        if len(t) == 0 or now - int(t) > 120:
            output = update()
            f.write(f"{now}\n{output}")
        else:
            output = f.read()

        print(output)

        fcntl.flock(f, fcntl.LOCK_UN)
