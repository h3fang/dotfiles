#!/usr/bin/env python3

# requires: checkupdates (pacman-contrib), yay

# modified from https://github.com/vivien/i3blocks-contrib/tree/master/arch-update
# format: {official repo packages count}+{AUR packages count}{* if matches WATCH}
# use yay for AUR check
# add timeout for subprocess calls

#
# Copyright (C) 2017 Marcel Patzwahl
# Licensed under the terms of the GNU GPL v3 only.
#
# i3blocks blocklet script to see the available updates of pacman and the AUR

from subprocess import check_output, CalledProcessError, TimeoutExpired
from sys import stderr

BASE_COLOR = "#00FF00"
UPDATE_COLOR = "yellow"
ERROR_COLOR = "red"


def check_updates(cmd, callback, no_update_ret=None):
    try:
        output = check_output(cmd, encoding="utf-8", timeout=15)
        return True, callback(output)
    except CalledProcessError as e:
        if no_update_ret and e.returncode == no_update_ret:
            return True, []
        else:
            print(e, file=stderr)
            return False, []
    except Exception as e:
        print(e, file=stderr)
        return False, []


if __name__ == '__main__':
    message = "<span color='{0}'>{1}</span>+<span color='{2}'>{3}</span>"

    repo_updated, repo_updates = check_updates(["checkupdates"], lambda o: [line.split(' ')[0] for line in o.split('\n') if line], 2)
    aur_updated, aur_updates = check_updates(["yay", "-Qua"], lambda o: [line for line in o.split('\n') if line])

    repo_count = len(repo_updates)
    aur_count = len(aur_updates)

    repo_color = BASE_COLOR
    aur_color = BASE_COLOR

    if repo_count > 0:
        repo_color = UPDATE_COLOR
    elif not repo_updated:
        repo_color = ERROR_COLOR

    if aur_count > 0:
        aur_color = UPDATE_COLOR
    elif not aur_updated:
        aur_color = ERROR_COLOR

    message = message.format(repo_color, repo_count, aur_color, aur_count)
    print(message)
    print(message)

