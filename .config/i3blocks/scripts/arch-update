#!/usr/bin/env python3

# requires: pacman-contrib, yay

# modified from https://github.com/vivien/i3blocks-contrib/tree/master/arch-update
# output format: {official repo packages count}+{AUR packages count}


from subprocess import check_output, CalledProcessError
from sys import stderr
import fcntl

BASE_COLOR = "white"
UPDATE_COLOR = "lime"
ERROR_COLOR = "red"


def check_updates(cmd, no_update_ret=None):
    try:
        output = check_output(cmd, encoding="utf-8", timeout=15)
        updates = [line for line in output.split("\n") if line]
        color = UPDATE_COLOR if len(updates) > 0 else BASE_COLOR
        return updates, color
    except CalledProcessError as e:
        if e.returncode == no_update_ret:
            return [], BASE_COLOR
        else:
            print(e, file=stderr)
            return [], ERROR_COLOR
    except Exception as e:
        print(e, file=stderr)
        return [], ERROR_COLOR


if __name__ == "__main__":
    # multiple instances will contend for the db.lock and fail
    # temporary workaround for https://github.com/Alexays/Waybar/issues/368
    fd = open("/tmp/arch_update_checkupdates.lock", "wb")
    try:
        fcntl.flock(fd, fcntl.LOCK_EX)
        repo_updates, repo_color = check_updates(["checkupdates"], 2)
    finally:
        fcntl.flock(fd, fcntl.LOCK_UN)

    aur_updates, aur_color = check_updates(["yay", "-Qua"])

    repo_count = len(repo_updates)
    aur_count = len(aur_updates)

    message = (
        f"<span color='{repo_color}'>{repo_count}</span>"
        + "+"
        + f"<span color='{aur_color}'>{aur_count}</span>"
    )
    print(message)

    if repo_count + aur_count > 0:
        if repo_count > 5:
            repo_updates = repo_updates[:5] + ["..."]
        if aur_count > 5:
            aur_updates = aur_updates[:5] + ["..."]

        details = "\r".join(repo_updates + aur_updates)

        print(details)
